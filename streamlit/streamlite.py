# Script pour l'application Streamlit "Le 23√®me √âcran".

# ------- INFOS POUR LANCER LE STREAMLIT -------

# Commande pour lancer sur Windows : streamlit run .\streamlit\streamlite.py
# Afficher le site web h√©berg√© sur Git Hub / Streamlit Cloud : https://movie-recommendation-project-wcs-bleu-sauvage.streamlit.app/



# ------- Import des biblioth√®ques n√©cessaires -------

import streamlit as st
import streamlit_authenticator as stauth
import pandas as pd
from streamlit_option_menu import option_menu
# from fuzzywuzzy import process
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import time
import os # lire la feuille de style (chemin absolu)
from rapidfuzz import process, fuzz



# ------- CHEMINS FICHIERS DONNEES -------

logo = "streamlit/logo.png"

style_css = "streamlit/style.css"

df_infos_csv = "donnees/data/df_info.csv.gz"    

df_ml_csv = "machine learning/DF_ML.csv.gz"



# ------- CONFIG GLOBALE -------

st.set_page_config(
    page_title="Cin√©ma le 23√®me √âcran",
    layout="wide")



# ------- CHARGEMENT DES DONNEES -------

@st.cache_data
def load_movie_infos():
    df = pd.read_csv(df_infos_csv)
    return df

df_infos = load_movie_infos() 

   

# ------ Fonction de r√©cup√©ration du style CSS ------

def load_css(file_name):
    # Utiliser un chemin relatif bas√© sur la racine
    file_path = file_name  # Avec style.css dans le m√™me dossier que le script.py
    try:
        with open(file_path) as f:
            st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)
    except FileNotFoundError:
        st.error("Erreur : Le fichier CSS n'a pas √©t√© trouv√©. V√©rifiez le chemin.")

load_css(style_css)


#  ------- Fonction de similarit√© avec un mod√®le de ML -------

def recommandation(tconst):
    import pandas as pd
    from sklearn.neighbors import NearestNeighbors

    import warnings
    warnings.filterwarnings("ignore", category=UserWarning)
    warnings.filterwarnings("ignore", category=FutureWarning)

    df_test = pd.read_csv("machine learning/DF_ML.csv.gz")

    # Pr√©paration des donn√©es

    index = df_test.index
    df_test_num = df_test.select_dtypes('number')
    df_test_cat = df_test.select_dtypes(['object', 'category', 'string', 'bool'])

    # Normalisation des colonnes num√©riques
    from sklearn.preprocessing import MinMaxScaler
    SN = MinMaxScaler()
    df_test_num_SN = pd.DataFrame(SN.fit_transform(df_test_num), columns=df_test_num.columns, index=index)

    # Encodage uniquement de la colonne 'nconst'
    df_test_cat_encoded = df_test_cat.copy()
    from sklearn.preprocessing import LabelEncoder
    le = LabelEncoder()
    df_test_cat_encoded['nconst'] = le.fit_transform(df_test_cat_encoded['nconst'].fillna('inconnu'))

    # On assemble le df num√©rique et le df texte
    df_test_encoded = pd.concat([df_test_num_SN, df_test_cat_encoded], axis=1)

    #On s√©pare notre df en deux groupes, en fonction de la note
    bons_films = df_test_encoded[df_test_encoded['notes'] >= 0.7]

    # KNN sur les caract√©ristiques num√©riques

    colonnes_a_exclure = ['tconst', 'title', 'tmdb_popularity', 'title_ratings_numVotes', 'imdb_id', 'genres', 'overview', 'overview_lem']
    caracteristiques = df_test_encoded.columns.drop(colonnes_a_exclure, errors='ignore')

    model = NearestNeighbors(n_neighbors=1000, metric='euclidean') # Il faudra tester d'autres combinaisons
    model.fit(bons_films[caracteristiques])

    caract_film = df_test_encoded[df_test_encoded['tconst'] == tconst][caracteristiques]
    distances, indices = model.kneighbors(caract_film)

    if not df_test_encoded[(df_test_encoded['tconst'] == tconst) & (df_test_encoded['notes'] >= 0.7)].empty:
        selection = bons_films.iloc[indices[0]].copy()
        selection['distance_knn'] = distances[0]
    else:
        selection = bons_films.iloc[indices[0]].copy()
        selection = pd.concat([df_test_encoded[df_test_encoded['tconst'] == tconst], selection.iloc[:-1]], axis=0)
        selection['distance_knn'] = distances[0]

    # TF-IDF avec lemmatisation

    colonnes_poids = {
        'genres': 1,
        'overview_lem': 1,
        'nconst': 1
    }

    # On cr√©e une colonne 'texte' qui combine les valeurs pond√©r√©es des colonnes sp√©cifi√©es
    selection['texte'] = selection.apply(lambda row: 
        ' '.join([
            (str(row[col]) + ' ') * colonnes_poids.get(col, 1)  # R√©p√®te la valeur de la colonne selon son poids
            for col in colonnes_poids.keys()
        ]),
        axis=1
    )

    from sklearn.feature_extraction.text import TfidfVectorizer
    vectorizer = TfidfVectorizer(stop_words='english', max_df=0.8)
    tfidf_matrix = vectorizer.fit_transform(selection['texte'])

    model_tfidf = NearestNeighbors(n_neighbors=1000, metric='cosine')
    model_tfidf.fit(tfidf_matrix)

    distances_tfidf, indices_tfidf = model_tfidf.kneighbors(tfidf_matrix[0])
    selection['distance_tfidf'] = distances_tfidf[0]
    
    # Moyenne pond√©r√©e des distances

    poids_knn = 1
    poids_tfidf = 100

    selection['distance_ponderee'] = (
        poids_knn * selection['distance_knn']) + (poids_tfidf * selection['distance_tfidf']
    ) 

    # Tri final par la distance pond√©r√©e
    selection = selection.sort_values(by='distance_ponderee')

    # R√©sultat final

    selection_finale = pd.DataFrame(selection['tconst'][1:11]).reset_index(drop=True)

    return afficher_resultats_similarite(selection_finale)




# ------- Fonctions de navigation -------

# Fonction qui affiche le menu de l'app
def afficher_menu():
    # Affichage du menu avec le logo √† gauche et les boutons de navigation
    col1, col2 = st.columns([1, 3])
    with col1:
    # Affichage du logo √† gauche
        st.image(logo, use_container_width=True)
    with col2:
    # Initialisation de l'√©tat si n√©cessaire
        if "menu_choice" not in st.session_state:
            st.session_state["menu_choice"] = "Accueil" 
        # Liste des options du menu
        options = ["Accueil", "√Ä propos", "Actualit√©s"]
        # Construction des boutons dans une disposition horizontale
        cols = st.columns(len(options))
        for i, option in enumerate(options):
            # Bouton interactif dans chaque colonne
            if cols[i].button(option, key=f"bouton_{option}", on_click=lambda: navigate_to(option)):
                st.session_state["menu_choice"] = option



# Fonction qui identifie les noms de films les plus proches avec le texte entr√© dans la barre de recherches
def search(query, choices, limit=10, threshold=50):
    results = process.extract(query, choices, limit = limit, scorer=fuzz.WRatio, score_cutoff=80)
    filtered_results = [result[0] for result in results if result[1] >= threshold]
    return filtered_results


# Fonction pour afficher la page d'accueil : 
def afficher_accueil():
    
    st.markdown("<div class='search-container'>", unsafe_allow_html=True)
    # Prioriser la valeur stock√©e dans st.session_state["search_query"] si elle existe
    if st.session_state["search_query"]:
        search_query = st.session_state["search_query"]
        st.session_state["search_query"] = ""  # R√©initialiser apr√®s usage
    else:
        search_query = st.text_input(
        "Pour recevoir des suggestions personnalis√©es :",
        placeholder="Renseignez le titre d'un film que vous appr√©ciez...",
        key="search_query"
        )
    st.markdown("</div>", unsafe_allow_html=True)
    
    if search_query:
        results = search(search_query, df_infos['Titre'].tolist())
        if results:
            selected_title = st.selectbox("S√©lectionnez un film :", results)
            st.markdown(f"<h2>Votre s√©lection</h2>",
                    unsafe_allow_html=True)
            col3, col4 = st.columns([1, 3])
            col5, col6 = st.columns([1, 3])
            with col3:
                # V√©rifier si le chemin de l'affiche n'est pas manquant
                st.markdown(f"<h3>{df_infos.loc[df_infos['Titre'] == selected_title, 'Titre'].values[0]} ({df_infos.loc[df_infos['Titre'] == selected_title, 'Ann√©e de Sortie'].values[0]})</h3>", unsafe_allow_html=True)
            with col5:
                if not pd.isna(df_infos.loc[df_infos['Titre'] == selected_title, "Chemin Affiche"]).values[0]:
                    st.image(f"https://image.tmdb.org/t/p/w500{df_infos.loc[df_infos['Titre'] == selected_title, 'Chemin Affiche'].values[0]}", width=150)
                else:
                    st.markdown(
                        f"<div style='width: 150px; height: 225px; background-color: black; color: white; display: flex; justify-content: center; align-items: center; text-align: center;'>{selected_title}</div>",
                        unsafe_allow_html=True
                    )
            with col6:
                # Informations suppl√©mentaires
                st.markdown(f"Synopsis : {df_infos.loc[df_infos['Titre'] == selected_title, 'Synopsis'].values[0]}")
                st.markdown(f"Dur√©e : {df_infos.loc[df_infos['Titre'] == selected_title, 'Dur√©e (min)'].values[0]} min")
                st.markdown(f"{df_infos.loc[df_infos['Titre'] == selected_title, 'genres'].values[0]}")

                etoiles_jaunes = "‚≠ê" * int(round(df_infos.loc[df_infos['Titre'] == selected_title, 'Note'].values[0] / 2))
                st.markdown(f"{round(df_infos.loc[df_infos['Titre'] == selected_title, 'Note'].values[0],1)}/10 {etoiles_jaunes}")
                st.markdown(f"{int(df_infos.loc[df_infos['Titre'] == selected_title, 'Indice Bechdel'].values[0])}/3 üôç‚Äç‚ôÄÔ∏è Test de Bechdel")
            recommandation(df_infos[df_infos['Titre'] == selected_title]['tconst'].values[0])
        else:
            st.write("Aucun r√©sultat trouv√©.")
    else:
        st.write("Commencez √† taper pour voir les suggestions.")

        

# ------- Fonction d'affichage des r√©sultats de recherche de similarit√© (ML) -------

def afficher_resultats_similarite(df_resultats_similarite):
    st.markdown(f"<h2>Nos recommandations</h2>",
                    unsafe_allow_html=True)
    # Recherche des informations dans df_infos pour les films identifi√©s 
    # dans df_resultats_similarite via leur identifiant unique (tconst).
    df_display = df_infos[df_infos['tconst'].isin(df_resultats_similarite['tconst'])]

    # Configuration des colonnes
    num_cols = 5                # D√©finit le nombre de colonnes √† afficher dans l'interface.
    rows = [df_display.iloc[i:i + num_cols] for i in range(0, len(df_display), num_cols)] # Divise le DataFrame en groupes de 5 films pour cr√©er des lignes dans le tableau.

    # Gestion de l'√©tat (Session)
    # Initialiser une variable de session pour stocker le film s√©lectionn√©.
    if "selected_movie_from_reco" not in st.session_state: 
        st.session_state["selected_movie_from_reco"] = None 

    # Parcours des lignes de films
    # st.columns(num_cols) : Cr√©e un ensemble de colonnes pour afficher plusieurs films c√¥te √† c√¥te.
    # La boucle : Parcourt chaque ligne de films (d√©finie pr√©c√©demment).
    for row_df in rows:
        cols = st.columns(num_cols) 

        for col, (_, row) in zip(cols, row_df.iterrows()): # Pour chaque film dans une ligne
            with col:
                # Affichage de l'affiche ou du titre en fallback

                # Si une affiche est disponible
                if pd.notna(row["Chemin Affiche"]):
                    st.image(f"https://image.tmdb.org/t/p/w500{row['Chemin Affiche']}", width=150)
                
                # Si l'affiche n'est pas disponible
                else:
                    st.markdown(
                        f"<div style='width: 150px; height: 225px; background-color: black; color: white; display: flex; justify-content: center; align-items: center; text-align: center;'>{row['Titre']}</div>",
                        unsafe_allow_html=True
                    )
                
                # Informations suppl√©mentaires
                st.markdown(f"**{row['Titre']}**", unsafe_allow_html=True)
                st.markdown(f"{row['Ann√©e de Sortie']} - {row['Dur√©e (min)']} min")
                st.markdown(f"{row['genres']}")

                etoiles_jaunes = "‚≠ê" * round(row['Note'] / 2)
                st.markdown(f"{round(row['Note'],1)}/10 {etoiles_jaunes}")
                st.markdown(f"üôç‚Äç‚ôÄÔ∏è Test de Bechdel : {row['Indice Bechdel']}/3")
                if st.button("Voir les d√©tails de ce film", key=f"bouton_{row['tconst']}", on_click=afficher_accueil):
                    st.session_state["search_query"] = row['Titre']
                    st.session_state["menu_choice"] = "Accueil"
                st.markdown(f"<br>",unsafe_allow_html=True)
        # Remplissage des colonnes vides si n√©cessaire
        for col in cols[len(row_df):]:
            with col:
                st.empty()



# Fonction pour afficher "√Ä propos"
def afficher_a_propos():
    st.markdown("<header>", unsafe_allow_html=True)
    st.title("√Ä propos")
    
    # Ajout du logo
    st.image(logo, use_column_width=True, caption="Le 23√®me √âcran")
    
    # Contenu format√©
    st.markdown(
        """
        ## Bienvenue au **23√®me √âcran**, votre cin√©ma local au c≈ìur de la Creuse !
        Nous sommes bien plus qu‚Äôune simple salle de projection. Ici, nous c√©l√©brons le **septi√®me art** avec une approche chaleureuse et conviviale, adapt√©e aux attentes de notre public.
        
        ### Notre histoire
        Situ√© √† **Gu√©ret**, le **23√®me √âcran** est n√© de l‚Äôenvie de redynamiser l‚Äôoffre culturelle de notre r√©gion.  
        Nous proposons une programmation **diversifi√©e**, alliant grands classiques, films r√©cents, et p√©pites ind√©pendantes, afin de satisfaire toutes les g√©n√©rations et tous les go√ªts.

        ### Une exp√©rience unique
        - **Confort moderne** : des salles √©quip√©es pour un son et une image de haute qualit√©.
        - **√âv√©nements sp√©ciaux** : avant-premi√®res, soir√©es th√©matiques, et rencontres avec des r√©alisateurs ou acteurs.
        - **Espace d√©tente** : un lieu chaleureux pour partager un moment autour d‚Äôun caf√© avant ou apr√®s votre s√©ance.

        ### Le moteur de recommandations, votre compagnon cin√©phile
        Pour aller encore plus loin, nous avons d√©velopp√© un **moteur de recommandations** personnalis√©.  
        Son objectif ? Vous aider √† d√©couvrir les films qui correspondent √† vos go√ªts et √† vos envies.  
        Gr√¢ce √† des suggestions pertinentes bas√©es sur nos analyses et vos pr√©f√©rences, il vous accompagne dans votre voyage cin√©matographique.  
        Vous pouvez utiliser cet outil directement depuis notre site Internet, dans une **interface intuitive** et facile √† prendre en main.

        ### Notre mission
        Au **23√®me √âcran**, nous croyons que chaque film peut toucher une corde sensible et cr√©er des souvenirs inoubliables.  
        Nous sommes fiers de soutenir le cin√©ma local et international tout en innovant pour offrir une exp√©rience digitale moderne, √† la port√©e de tous.

        **Merci de faire partie de notre aventure. √Ä bient√¥t dans nos salles !**
        """,
        unsafe_allow_html=True
    )
    st.markdown("</header>", unsafe_allow_html=True)


# Fonction pour afficher les actualit√©s
def afficher_actualites():
    st.title("Actualit√©s")
    st.markdown(
        """
        ## üé• Les Derni√®res Nouvelles du 23√®me √âcran !
        D√©couvrez toutes les actualit√©s de votre cin√©ma pr√©f√©r√© √† Gu√©ret. Restez inform√© des √©v√©nements, avant-premi√®res et nouveaut√©s qui font vivre notre salle !
        """
    )

    # Section 1 : √âv√©nements sp√©ciaux
    st.subheader("‚ú® √âv√©nements √† venir")
    st.markdown(
        """
        - **Vendredi 12 janvier 2025 : Avant-premi√®re exclusive**  
          Venez d√©couvrir *"Les Lumi√®res de la Creuse"*, un documentaire in√©dit sur notre r√©gion, suivi d'une discussion avec le r√©alisateur.
        
        - **Samedi 20 janvier 2025 : Soir√©e r√©trospective**  
          Th√®me : *Les chefs-d'≈ìuvre des ann√©es 80*. Plongez dans l'univers de Spielberg, Lucas, et bien d'autres !
        
        - **Dimanche 28 janvier 2025 : Atelier cin√©ma pour enfants**  
          Atelier cr√©atif pour apprendre √† r√©aliser un court-m√©trage, d√®s 10 ans (sur r√©servation).
        """
    )

    # Section 2 : Nouveaut√©s
    st.subheader("üéû Nouveaut√©s √† l'affiche")
    st.markdown(
        """
        - **"La Montagne Sacr√©e"** : Une √©pop√©e fascinante sur les myst√®res des contes tib√©tains.  
          (Salle 2, tous les jours √† 17h30)  
        - **"C≈ìurs √† Contre-temps"** : Une com√©die romantique √† ne pas manquer !  
          (Salle 1, s√©ances √† 15h et 20h)  
        - **"Le Dernier Horizon"** : Le blockbuster de l'ann√©e, en 4K et Dolby Atmos.  
          (Salle 1, s√©ances √† 14h, 18h et 21h30)
        """
    )

    # Section 3 : Programmation sp√©ciale
    st.subheader("üåü Focus sur le cin√©ma local")
    st.markdown(
        """
        - **"Regards sur la Creuse"** : Une s√©lection de courts-m√©trages r√©alis√©s par des talents locaux.  
          Projection gratuite, dimanche 14 janvier √† 16h (Salle 3).  

        - **Festival du film r√©gional** : Soutenons le cin√©ma de chez nous avec une programmation unique du 22 au 28 f√©vrier 2025.
        """
    )

    # Section 4 : Informations pratiques
    st.subheader("üìÖ R√©servez vos places d√®s maintenant !")
    st.markdown(
        """
        - **R√©servations en ligne :** Rendez-vous sur notre site pour r√©server vos billets en toute simplicit√©.  
        - **Tarifs r√©duits :** Profitez de nos tarifs avantageux pour les √©tudiants, seniors et familles.
        """
    )
    
    # Section : Image d'illustration
    st.image("../donnees/images/Cin√©ma.JPG", use_column_width=True, caption="Votre cin√©ma au c≈ìur des √©v√©nements üé¨")


# ------- Interface Utilisateur (UI) -------

if __name__ == "__main__":
    if "search_query" not in st.session_state:
        st.session_state["search_query"] = ""
    if "current_page" not in st.session_state:
        st.session_state["current_page"] = "Accueil"
    
    # Fonction pour changer de page
    def navigate_to(page):
        st.session_state["current_page"] = page
        st.session_state["search_query"] = ""

    # Afficher le menu principal
    page = afficher_menu()
    
    # Navigation bas√©e sur le choix dans l'√©tat
    menu_choice = st.session_state.get("menu_choice", "Accueil") 
    
    # Si l'utilisateur est sur la page "Accueil", 
    # la fonction afficher_accueil() est appel√©e pour afficher son contenu.
    if menu_choice == "Accueil":
        afficher_accueil()
    # Selon la valeur de menu_choice, l'application appelle la fonction
    # correspondante pour afficher le contenu des autres pages
    elif menu_choice == "A_propos":
        afficher_a_propos()
    elif menu_choice == "Actualites":
        afficher_actualites()

    # Gestion de l'√©tat de session
    if page != st.session_state.get("current_page", ""):
        st.session_state["current_page"] = page




# elif page == "Connexion":   
    # st.write("**Le 23√®me √âcran**, acc√©dez √† votre espace priv√© avec plus de fonctionnalit√©s")

    # authenticator.login() # afficher le formulaire de connexion et v√©rifier les informations d'identification de l'utilisateur


    # G√©rer l'acc√®s en fonction des informations renseign√©es

    # def accueil():
    #     st.title("Bienvenu sur le contenu r√©serv√© aux utilisateurs connect√©s")

    # if st.session_state["authentication_status"]:
    #     accueil()
        # Le bouton de d√©connexion
    #     authenticator.logout("D√©connexion")

# elif st.session_state["authentication_status"] is False:
#     st.error("L'username ou le password est/sont incorrect")
# elif st.session_state["authentication_status"] is None:
#    st.warning('Les champs username et mot de passe doivent √™tre remplie')

# Page les pages vitrines : actualit√©s, programmation, √† propos (optionnel)


# Page == "Film", n'apparait pas dans le menu, comment la d√©finie-t-on ?



# Formulaire d'inscription qui alimente :

# Base de gestion des donn√©es personnelles utilisateurs (en option avec la connexion)
# - ID
# - Pr√©nom
# - Nom
# - Email
# - Date de naissance
# - Adresse postale
# - CP
# - Ville
# - Pays


# Base de donn√©es notations
# - ID utilisateur
# - ID film
# - note